---
title: "The Power of Efficiency"
format: html
editor: visual
---

Efficiency is using the appropriate, well-planned tools and libraries to complete a specific task. Efficiency is an important consideration in statistical computing as it can significantly impact the speed and accuracy of statistical analyses, and ultimately the ability of researchers and analysts to make informed decisions based on data.

I struggled on understanding the differences between the mutating joins: "right_join, left_join, semi_join, anti_join, and full_join" My a-ha moment was when I realized that although either joins may be able to produce the same output, that doesn't necessarily mean that I have used the most efficient and correct tool for the problem. I took time to come to office hours to express my train of thought, and ensure that I am moving in the right track with my thinking. Afterwards, I took time to think about how I would incorporate it, and during this time I would look back at the lecture slides. An example of where I have showed my understanding of joins is in WD-6: I can use filtering joins to filter rows from a data frame. In Lab 4 Q5 where I was able to use both anti-join and semi-join efficiently.

Since the midterm portfolio, I have spent an abundant amount of time during school, as I have attended all class periods to absorb as much learning as possible. I have also started to attend office hours to better understand what I am doing wrong, and take time myself afterwards to figure out how to incorporate the things that I learned that I did incorrectly the first time. I believe that better results of my code have been shown by not only obtaining the output/results that I want, but that I use the tools that I have learned in class.

another a-ha moment was when I realized that I was using some superseded functions. This was when I realized that there can possibly be an abundant number of the same function in different forms and types that accomplish the same task. this is when I deeply understood the importance of modern tools and to ensure that I incorporated the most modern tools by testing the function out in the console like "?mutate_at" shows that is superseded. For example, before, I was still using mutate_at and also the incorrect syntax for mutate. An example of where I have used mutate efficiently is in R-3: I can write robust programs that are resistant to changes in inputs, Example 1 and also in PE-1: I can write concise code which does not repeat itself in my example of map() functions.
